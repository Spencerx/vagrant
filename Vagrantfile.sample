Vagrant.configure "2" do |config|

  # See https://github.com/mitchellh/vagrant/wiki/Available-Vagrant-Boxes for more boxes.
  config.vm.box     = "saucy64"
  config.vm.box_url = "http://cloud-images.ubuntu.com/vagrant/saucy/current/saucy-server-cloudimg-amd64-vagrant-disk1.box"

  # config.ssh.username = "vagrant"

  # requires installing a plugin with
  # vagrant gem install vagrant-vbguest
  config.vbguest.auto_update = true

  config.vm.provider "virtualbox" do |vm|
    # changing nictype partially helps with Vagrant issue #516, VirtualBox NAT interface chokes when
    # # of slow outgoing connections is large (in dozens or more).
    vm.customize ["modifyvm", :id, "--nictype1", "Am79C973", "--memory", "1536", "--cpus", "2", "--ioapic", "on"]

    # see https://github.com/mitchellh/vagrant/issues/912
    vm.customize ["modifyvm", :id, "--rtcuseutc", "on"]
  end
  config.vm.provision :shell do |sh|
    sh.inline = <<-EOF
      sudo apt-get install ruby1.9.1-dev
      sudo apt-get -y autoremove
      sudo apt-get -y clean
      gem install chef --no-ri --no-rdoc --no-user-install
    EOF
  end

  config.vm.provision :chef_solo do |chef|
    # this assumes you have opensensors/cookbooks cloned at ./cookbooks
    chef.cookbooks_path = ["cookbooks"]
    chef.log_level      = :debug

    # Highly recommended to keep apt packages metadata in sync and
    # be able to use apt mirrors.
    chef.add_recipe     "apt"

    # List the recipies you are going to work on/need.
    # chef.add_recipe     "build-essential"
    # chef.add_recipe     "networking_basic"

    # chef.add_recipe     "git"

    # chef.add_recipe     "java::openjdk7"
    # chef.add_recipe     "leiningen"

    # chef.add_recipe     "postgresql::all_packages"
    # chef.add_recipe     "cassandra::datastax"

    # chef.json.merge!({
    #                    :apt => {
    #                      :mirror => :ru
    #                    },
    #                    :postgresql => {
    #                      :max_connections => 256
    #                    }
    #                  })
  end
end
